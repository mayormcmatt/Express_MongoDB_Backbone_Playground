'use strict';

var lib = require('../../index');
var should = require('should');
var sinon = require('sinon');
var MongoClient = require('mongodb').MongoClient;
var ObjectId = require('mongodb').ObjectID;

var db;
var collection;

var User;

var random = Math.random();
var _id  = new ObjectId('52d3bca3e25e47fc2d860000');
var _id2 = new ObjectId('52d3bca3e25e47fc2d860300');
var uri = 'mongodb://localhost/mong-test2';

describe('Model', function () {
  before(function (done) {
    MongoClient.connect(uri, function (err, _db) {
      if (err) return done(err);
      collection = _db.collection('users');
      should.exist(collection);
      collection.insert({_id: _id, random: random}, function (err) {
        collection.insert({_id: _id2, random: Math.random()}, function (err) {
          _db.close(done);
        });
      });
    });
  });

  before(function (done) {
    db = lib.create(uri);
    User = db.model('users');

    User.ensureIndex({name: 1});
    db
    .on('error', done)
    .on('connect', function () {
      done();
    });
  });

  after(function (done) {
    db.disconnect(done);
    db.disconnect();
  });

  describe('.find', function () {
    it('should find the objects already in the collection', function (done) {
      var expectation = sinon.mock();
      expectation.once();

      User.find({_id: _id})
      .on('data', expectation)
      .on('end', function () {
        if (!expectation.firstCall.args[0]._id.equals(_id)) throw new Error('Wrong _id');
        expectation.verify();
        done();
      });
    });

    it('should support callbacks', function (done) {
      User.find(done);
    });

    it('should support providing callbacks', function (done) {

      User.find({}, {}, {sort: {_id: -1}}, function (err, docs) {
        docs.should.be.an.instanceOf(Array);
        done(err);
      });
    });
  });

  describe('.findOne', function () {
    it('should support callbacks', function (done) {
      User.findOne({_id: _id}, done);
    });
  })

  describe('.findById', function () {
    it('should support callbacks', function (done) {
      User.findById(_id, done);
    });
  });

  describe('.update', function () {
    it('should support callbacks', function (done) {
      User.update({_id: _id}, {$set: {list: [1,2,3]}}, done);
    });
  });

  describe('.remove', function () {
    it('should support callbacks', function (done) {
      User.remove({none: 'match'}, done);
    });
  });

  describe('.findAndModify', function () {
    it('should support callbacks', function (done) {
      User.findAndModify({xyz: 123}, {}, {$set: {z: -4}}, done);
    });
  });

  describe('.aggregate', function () {
    it('should support callbacks', function (done) {
      User.aggregate([{$group: {_id: null}}], done);
    });
    it('should support streams', function (done) {
      var expectation = sinon.mock();
      expectation.once();
      User.aggregate([{$group: {_id: null}}])
      .on('data', expectation)
      .on('end', done);
    });
  });
});
