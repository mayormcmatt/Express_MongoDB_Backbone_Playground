'use strict';

var fieldName = '_private';

exports.createAccessor = function () {
  // Important: the only scope state maintained is this immutable object.
  // This ensures there are no memory leaks:
  // The stack is used only for debugging purposes
  // We will test equality (===) against this object to ensure that
  // it can only be accessed using this createAccessor() call.
  var secret = {stack: new Error().stack.split('\n')[2].trim()};

  var fn = function (instance) {
    var getter = instance[fieldName];

    if (getter) {
      return getter(secret);
    }

    var privateData = {};

    Object.defineProperty(instance, fieldName, {
      value: function (key) {
        if (key === secret) return privateData;
        throw new Error('Attempted to access private variable. \n\tVariable defined ' + secret.stack + '\n\twas accessed at ' + key.stack);
      }
    });

    return privateData;

  };

  // Remove all private variables:
  fn.clear = function (instance) {
    delete instance[fieldName];
  };

  return fn;
};
