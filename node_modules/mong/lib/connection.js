'use strict';

var MongoClient  = require('mongodb').MongoClient;
var EventEmitter = require('events').EventEmitter;
var inherits     = require('util').inherits;

var Document     = require('./model');

var $private     = require('./private').createAccessor();

module.exports = Connection;

inherits(Connection, EventEmitter);

function Connection(uri) {
  EventEmitter.call(this);
  $private(this).queued = [];
  if (uri) {
    this.connect(uri);
  }
}

Connection.prototype.connect = function (uri, done) {
  var options = {
    db: {
      native_parser: true
    }
  };

  var conn = this;


  MongoClient.connect(uri, options, function (err, db) {
    if (err) {
      if (done) {
        return done(err);
      }
      return conn.emit('error', err);
    }

    var queued = $private(conn).queued;

    $private(conn).db     = db;
    $private(conn).queued = null;

    // Execute all of the queued functions:
    queued.forEach(function (fn) { fn(db); });

    if (done) done(null, conn);

    conn.emit('connect', conn);
  });

  return this;
};

Connection.prototype.queue = function (fn) {
  var queue = $private(this).queued;
  if (!queue) return fn(this);
  queue.push(fn);
};

Connection.prototype.disconnect = function (done) {
  var active = $private(this).db;
  delete $private(this).db;

  if (active) {
    return active.close(done);
  }
  if (done) done();
};

/**
 * Create a new model linked to a mongodb collection.
 * @param  {String} collectionName Name as in database.
 * @return {Constructor} document constructor
 */
Connection.prototype.model = function (collectionName) {
  function CollectionDocument(o) {
    Document.call(this, o);
  }

  // Inherit static methods: (.find() etc)
  CollectionDocument.__proto__ = Document;

  var self = this;
  
  CollectionDocument.setConnection(self);
  CollectionDocument.setCollectionProvider(function () {
    return $private(self).db.collection(collectionName);
  });


  CollectionDocument.prototype = Object.create(Document.prototype, {
    constructor: {
      value        : CollectionDocument,
      enumerable   : false,
      writable     : true,
      configurable : true
    }
  });

  return CollectionDocument;
};
